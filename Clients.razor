@page "/clients"
@using MauiApp1.Data

<style>
    /* CSS styling for the page */

    body {
        background-color: lightblue;
        font-family: 'Times New Roman', Times, serif;
        h5

    {
        color: #333333;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .flex {
        display: flex;
    }

    .flex-column {
        margin-right: 10px;
    }

    .btn-primary {
        background-color: purple;
        color: #ffffff;
        font-family: 'Times New Roman', Times, serif, sans-serif;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    th {
        background-color: #f2f2f2;
    }

    .btn-secondary, .btn-danger, .btn-info, .btn-success {
        margin-right: 5px;
    }

    p {
        color: red;
        display: none;
    }
</style>

<h5>Manage Clients</h5>

<div class="form-group">
    <!-- Form for adding or updating a client -->
    <div class="flex">
        <!-- Input fields for client information -->

        <div class="flex-column">
            <label for="Id">ID: </label>
            <input type="text" class="form-control" id="Id" @bind="newClient.Id" placeholder="Enter Login ID" />
        </div>
        <div class="flex-column">
            <label for="Name">Name: </label>
            <input type="text" class="form-control" id="Name" @bind="newClient.Name" placeholder="Enter name" />
        </div>
        <div class="flex-column">
            <label for="Address">Address: </label>
            <input type="text" class="form-control" id="Address" @bind="newClient.Address" placeholder="Enter address" />
        </div>
        <div class="flex-column">
            <label for="Phone">Phone: </label>
            <input type="text" class="form-control" id="Phone" @bind="newClient.Phone" placeholder="Enter phone number" />
        </div>
        <div class="flex-column">
            <label for="Email">Email: </label>
            <input type="email" class="form-control" id="Email" @bind="newClient.Email" placeholder="Enter email" />
        </div>
        <div class="flex-column">
            <label for="MemberId">Member ID: </label>
            <input type="number" class="form-control" id="MemberId" @bind="newClient.MemberId" placeholder="Enter Member ID" />
            <!--  exception we selected the input to be numerical rather than text.  -->

        </div>
    </div>
    <button class="btn btn-primary" @onclick="AddOrUpdateClient">Save Client</button>
</div>

<br />
<h5>Clients</h5>
<!-- Table to display the list of clients -->
<table class="table">
    <thead>
        <tr>
            <th>Login ID</th>
            <th>Name</th>
            <th>Address</th>
            <th>Phone</th>
            <th>Email</th>
            <th>Member ID</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var client in clients)
        {
            <tr>
                <td>@client.Id</td>
                <td>@client.Name</td>
                <td>@client.Address</td>
                <td>@client.Phone</td>
                <td>@client.Email</td>
                <td>@client.MemberId</td>
                <td>
                    <button class="btn btn-secondary btn-sm" @onclick="() => EditClient(client)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteClient(client)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<!-- This section will tell us about process of the database how it wil updat in our gym managaement system. -->


<button class="btn btn-success" @onclick="UpdateDatabase">Update Database</button>
<p style="color: blue; display: @successMessageDisplay">@successMessage</p>

<button class="btn btn-info" @onclick="ShowAllClients">Show all clients</button>

@code {
    private ClientModel newClient = new ClientModel();
    private List<ClientModel> clients = new List<ClientModel>();
    private ClientModel editingClient = null; 

    private void AddOrUpdateClient()
    {
        if (editingClient == null)
        {
            clients.Add(new ClientModel
                {
                    Id = newClient.Id,
                    Name = newClient.Name,
                    Address = newClient.Address,
                    Phone = newClient.Phone,
                    Email = newClient.Email,
                    MemberId = newClient.MemberId
                });
        }
        else
        {

            editingClient.Id = newClient.Id;
            editingClient.Name = newClient.Name;
            editingClient.Address = newClient.Address;
            editingClient.Phone = newClient.Phone;
            editingClient.Email = newClient.Email;
            editingClient.MemberId = newClient.MemberId;


            editingClient = null;
        }

        newClient = new ClientModel();
    }

    private void DeleteClient(ClientModel client)
    {
        clients.Remove(client);
    }

    private void EditClient(ClientModel client)
    {
        editingClient = client;

        newClient.Id = client.Id;
        newClient.Name = client.Name;
        newClient.Address = client.Address;
        newClient.Phone = client.Phone;
        newClient.Email = client.Email;
        newClient.MemberId = client.MemberId;
    }

    public class ClientModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string MemberId { get; set; }
    }
    private string successMessage = "Database Updated!";
    private string successMessageDisplay = "none";  

    private void UpdateDatabase()
    {
    
        successMessageDisplay = "block";

        Task.Delay(3000).ContinueWith(_ => successMessageDisplay = "none");
    }
    private void ShowAllClients()
    {

    }
}